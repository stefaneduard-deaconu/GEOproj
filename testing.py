import turtle
import ctypes

def screen_dimensions():
    # A simple function to compute the screen's dimensions.
    user32 = ctypes.windll.user32
    return user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)

screen_width, screen_height = screen_dimensions()
window_width, window_height = 0.618 * screen_width, 0.8 * screen_height
print(844, 614)
# window = turtle.Screen
turtle.setup(window_width, window_height)
print(turtle.screensize())

# turtle.Screen.setup(width=screen_width, height=screen_height)

def line(A, B, tad, color):
    x0, y0, x1, y1 = A[0], A[1], B[0], B[1]
    tads_position = tad.position()
    tads_color = tad.color()
    tad.color(color, color)
    tad.penup()
    tad.goto(x0, y0)
    tad.pendown()
    tad.goto(x1, y1)
    tad.penup()
    tad.goto(tads_position)
    tad.color(tads_color[0], tads_color[1])

def draw_poly(polygon, tad, color='lime'):
    tad.penup()
    tad.goto(polygon[0])
    tads_color = tad.color()
    tad.color(color, color)
    tad.pendown()
    for p in polygon + [polygon[0]]:
        tad.goto(p[0], p[1])
    tad.color(tads_color[0], tads_color[1])
    tad.penup()
    tad.goto(0, 0)


def draw_text(coords, text, tad, color='black'):
    tads_position = tad.position()
    tads_color = tad.color()
    tad.color(color, color)
    tad.pu()
    tad.goto(coords)
    tad.pd()
    tad.write(text, font=('Courier', 10, 'italic'), align='center')
    tad.pu()
    tad.color(tads_color[0], tads_color[1])
    tad.goto(tads_position)



polygons = [
    [(-124.0, 181.0), (-62.0, 103.0), (81.0, 181.0), (129.0, 22.0), (-37.0, 33.0), (80.0, -149.0), (-154.0, -166.0), (-203.0, 212.0), (-139.0, 62.0), (-37.0, 56.0), (-177.0, 205.0), (-48.0, 254.0)],
    [(115.0, -59.0), (142.0, 136.0), (9.0, 85.0), (-95.0, 176.0), (-82.0, -152.0), (71.0, 30.0)],
    [(-176.0, 140.0), (-186.0, 98.0), (55.0, 186.0), (14.0, 6.0), (184.0, 81.0), (234.0, -118.0), (-92.0, -116.0), (-31.0, 80.0), (-228.0, -149.0), (-245.0, 197.0)],
    [(-308.0, 66.0), (-247.0, 200.0), (-193.0, 22.0), (-162.0, 80.0), (-189.0, 128.0), (-107.0, 205.0), (-94.0, 86.0), (-120.0, 39.0), (-74.0, -36.0), (-38.0, 52.0), (-56.0, 108.0), (347.0, 212.0), (23.0, 37.0), (39.0, 13.0), (75.0, 44.0), (-96.0, -267.0)],
    [(-289.0, 194.0), (-182.0, 219.0), (24.0, 77.0), (117.0, 220.0), (162.0, 27.0), (307.0, 141.0), (215.0, -245.0), (88.0, 18.0), (-159.0, -208.0), (44.0, -141.0), (70.0, -263.0), (-239.0, -247.0), (-334.0, 153.0), (-259.0, 63.0), (-64.0, 51.0), (-226.0, -18.0), (-230.0, -114.0), (-6.0, 52.0)],
    [(0, 200), (200, 0), (0, -200), (-200, 0)],
    [(0, 200), (200, -200), (0, 0), (-200, -200)],
    [(-239.0, 68.0), (-123.0, 247.0), (-96.0, 98.0), (-157.0, 92.0), (152.0, 15.0), (163.0, 249.0), (-6.0, 155.0), (124.0, 288.0), (370.0, 204.0), (251.0, -69.0), (254.0, 129.0), (70.0, -168.0), (-269.0, -91.0), (-10.0, 1.0), (-303.0, -10.0), (-320.0, 200.0)],
    [(19.0, 247.0), (-112.0, 113.0), (-162.0, 223.0), (-231.0, -35.0), (-307.0, 76.0), (-242.0, -207.0), (-14.0, -17.0), (-73.0, 51.0)],
    [(-197.0, 144.0), (-62.0, 239.0), (-58.0, 71.0), (-125.0, 134.0), (-95.0, -49.0), (190.0, 216.0), (34.0, 225.0), (24.0, 126.0), (-7.0, 250.0), (290.0, 265.0), (242.0, 199.0), (412.0, 242.0), (224.0, 79.0), (328.0, 80.0), (203.0, -60.0), (173.0, 93.0), (221.0, 139.0), (42.0, 33.0), (147.0, 13.0), (-25.0, -47.0), (-112.0, -108.0), (-171.0, 66.0), (-280.0, 41.0), (-343.0, -60.0), (-248.0, -141.0), (-215.0, -43.0), (-283.0, -17.0), (-216.0, 3.0), (-175.0, -77.0), (-205.0, -139.0), (-127.0, -136.0), (-242.0, -179.0), (-135.0, -236.0), (38.0, -103.0), (148.0, -214.0), (-58.0, -233.0), (-17.0, -189.0), (-164.0, -268.0), (-318.0, -161.0), (-360.0, -244.0), (-362.0, 135.0), (-295.0, 107.0), (-270.0, 253.0), (-241.0, 198.0), (-123.0, 237.0), (-251.0, 167.0), (-211.0, 79.0), (-160.0, 145.0)],
    [(56.0, 113.0), (111.0, 167.0), (131.0, 41.0), (180.0, 70.0), (241.0, -45.0), (75.0, -47.0), (91.0, 38.0), (-71.0, -195.0), (133.0, -147.0), (-122.0, -272.0), (-255.0, -128.0), (-40.0, -50.0), (-97.0, -113.0), (30.0, -9.0), (-234.0, 74.0), (-120.0, 223.0), (-96.0, 123.0), (68.0, 240.0), (85.0, 196.0), (-23.0, 109.0), (92.0, 113.0)],
    [(16.0, 71.0), (133.0, 159.0), (106.0, 43.0), (262.0, -84.0), (-131.0, -128.0), (33.0, 20.0), (-164.0, 34.0), (-34.0, 224.0), (-18.0, 157.0), (37.0, 213.0)],
[(16.0, 71.0), (133.0, 159.0), (106.0, 43.0), (262.0, -84.0), (-131.0, -128.0), (33.0, 20.0), (-164.0, 34.0), (-34.0, 224.0), (-18.0, 157.0), (37.0, 213.0)]
]
which_one = 10

def main():
    tad = turtle.Turtle()
    tad.speed(10)
    tad.ht()

    # using the turtle to first draw the 'coordinate axes' :D

    line((-window_width * 0.9 // 2, 0), (window_width * 0.9 // 2, 0), tad, 'lime')
    tad.setheading(90)
    line((0, -window_height * 0.9 // 2), (0, window_height * 0.9 // 2), tad, 'lime')

    # draw the poly

    tad.pensize(2)
    tad.speed(7)
    draw_poly(polygons[which_one], tad, color='blue')

    # testing the decomposition algorithm
    from triangles import triangulate
    from triangles import y_decompose
    from pprint import pprint

    for polygon in polygons[which_one:which_one + 1]:
        edges, polys = y_decompose(polygon)
        print()
        print('*' * len('* In the end we\'ve got: *'))
        print('* In the end we\'ve got: *')
        print('*' * len('* In the end we\'ve got: *'))
        print()
        # drawing them:
        # draw the y-monotone polys:
        # draw_poly(polygon, tad, color='red')
        tad.pensize(2)
        tad.speed(7)
        for edge in edges:
            line(edge[0], edge[1], tad, color='red')
        for poly in polys:
            lines, triangles = triangulate(poly)
            for lin in lines:
                line(lin[0], lin[1], tad, color='red')

        tad.screen.mainloop()

    # testing the triangulation algorithm:

    # y_polys = [
    #     [(-123.0, 237.0), (-241.0, 198.0), (-251.0, 167.0)],
    #     [(-160.0, 145.0), (-62.0, 239.0), (-197.0, 144.0)],
    #     [(34.0, 225.0), (290.0, 265.0), (-7.0, 250.0), (24.0, 126.0)],
    #     [(-211.0, 79.0), (-251.0, 167.0), (-241.0, 198.0), (-270.0, 253.0),
    #         (-295.0, 107.0)],
    #     [(-62.0, 239.0), (-125.0, 134.0), (-58.0, 71.0)],
    #     [(224.0, 79.0), (412.0, 242.0), (242.0, 199.0), (221.0, 139.0),
    #         (173.0, 93.0), (203.0, -60.0)],
    #     [(328.0, 80.0), (224.0, 79.0), (203.0, -60.0)],
    #     [(-95.0, -49.0), (-125.0, 134.0), (-62.0, 239.0), (-160.0, 145.0),
    #         (-211.0, 79.0), (-171.0, 66.0), (-112.0, -108.0)],
    #     [(-25.0, -47.0), (147.0, 13.0), (42.0, 33.0), (221.0, 139.0),
    #         (242.0, 199.0), (290.0, 265.0), (34.0, 225.0), (190.0, 216.0),
    #         (-95.0, -49.0), (-112.0, -108.0)],
    #     [(-205.0, -139.0), (-175.0, -77.0), (-216.0, 3.0), (-283.0, -17.0),
    #         (-215.0, -43.0), (-248.0, -141.0)],
    #     [(148.0, -214.0), (38.0, -103.0), (-17.0, -189.0), (-58.0, -233.0)],
    #     [(-318.0, -161.0), (-248.0, -141.0), (-343.0, -60.0), (-280.0, 41.0),
    #         (-171.0, 66.0), (-211.0, 79.0), (-295.0, 107.0), (-362.0, 135.0),
    #         (-360.0, -244.0)],
    #     [(-135.0, -236.0), (-242.0, -179.0), (-127.0, -136.0),
    #         (-205.0, -139.0), (-248.0, -141.0),
    #         (-318.0, -161.0), (-164.0, -268.0)],
    #     [(-17.0, -189.0), (38.0, -103.0), (-135.0, -236.0), (-164.0, -268.0)]
    # ]
    #
    # for poly in y_polys:
    #     print(triangulate(poly))
    # tad.screen.mainloop()

    # line(edges[-1][0], edges[-1][1], tad, 'red')
    # draw_text(cur_point, str(cur_index), tad, color='lime')

if __name__ == '__main__':
    main()
